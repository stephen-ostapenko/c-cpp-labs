#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"

#include "hufftree.h"
#include <cstddef>
#include <random>
#include <iostream>

using std::size_t;
using huff_tree::CharCounter;
using huff_tree::HuffTree;

const size_t BITS_IN_CHAR = sizeof(char) * 8;

TEST_SUITE("test CharCounter") {
	TEST_CASE("test 1") {
		CharCounter cnt;
		std::string res = "Hello, world!";

		for (char c : res) {
			cnt.add_char(c);
		}

		CHECK(cnt.get_char_cnt('H') == 1);
		CHECK(cnt.get_char_cnt('e') == 1);
		CHECK(cnt.get_char_cnt('l') == 3);
		CHECK(cnt.get_char_cnt('o') == 2);
		CHECK(cnt.get_char_cnt(',') == 1);
		CHECK(cnt.get_char_cnt(' ') == 1);
		CHECK(cnt.get_char_cnt('w') == 1);
		CHECK(cnt.get_char_cnt('r') == 1);
		CHECK(cnt.get_char_cnt('d') == 1);
		CHECK(cnt.get_char_cnt('!') == 1);
	}

	TEST_CASE("test 2") {
		CharCounter cnt;
		std::string res = "Huffman algo";

		for (char c : res) {
			cnt.add_char(c);
		}

		CHECK(cnt.get_char_cnt('H') == 1);
		CHECK(cnt.get_char_cnt('u') == 1);
		CHECK(cnt.get_char_cnt('f') == 2);
		CHECK(cnt.get_char_cnt('m') == 1);
		CHECK(cnt.get_char_cnt('a') == 2);
		CHECK(cnt.get_char_cnt('n') == 1);
		CHECK(cnt.get_char_cnt(' ') == 1);
		CHECK(cnt.get_char_cnt('l') == 1);
		CHECK(cnt.get_char_cnt('g') == 1);
		CHECK(cnt.get_char_cnt('o') == 1);
	}

	TEST_CASE("test 3") {
		CharCounter cnt;
		std::string res = "!@#$%^&*";

		for (char c : res) {
			cnt.add_char(c);
		}

		CHECK(cnt.get_char_cnt('!') == 1);
		CHECK(cnt.get_char_cnt('@') == 1);
		CHECK(cnt.get_char_cnt('#') == 1);
		CHECK(cnt.get_char_cnt('$') == 1);
		CHECK(cnt.get_char_cnt('%') == 1);
		CHECK(cnt.get_char_cnt('^') == 1);
		CHECK(cnt.get_char_cnt('&') == 1);
		CHECK(cnt.get_char_cnt('*') == 1);
	}

	TEST_CASE("test 4") {
		CharCounter cnt;
		size_t act[256]{};
		const size_t N = 10000;
		std::mt19937 mtw(0);

		for (size_t i = 0; i < N; i++) {
			char c = mtw();
			act[(unsigned char)c]++; cnt.add_char(c);
		}

		for (size_t i = 0; i < (1 << BITS_IN_CHAR); i++) {
			CHECK(act[i] == cnt.get_char_cnt(i));
		}
	}

	TEST_CASE("test 5") {
		CharCounter cnt;
		for (size_t i = 0; i < (1 << BITS_IN_CHAR); i++) {
			CHECK(cnt.get_char_cnt(i) == 0);
		}
	}
}

TEST_SUITE("test HuffTree") {
	TEST_CASE("test rebuild 1") {
		HuffTree t;
		CharCounter cnt;
		std::mt19937 mtw(1);
		const size_t N = 10000;

		for (size_t i = 0; i < N; i++) {
			char c = mtw();
			cnt.add_char(c);
		}

		t.rebuild(cnt);

		size_t sz = 0;
		for (size_t i = 0; i < (1 << BITS_IN_CHAR); i++) {
			sz += cnt.get_char_cnt(i) * t.get_char_code(i).size();
		}

		CHECK(sz == 79974);
	}

	TEST_CASE("test rebuild 2") {
		HuffTree t;
		CharCounter cnt;
		std::mt19937 mtw(2);
		const size_t N = 10000;

		for (size_t i = 0; i < N; i++) {
			char c = mtw();
			cnt.add_char(c);
		}

		t.rebuild(cnt);

		size_t sz = 0;
		for (size_t i = 0; i < (1 << BITS_IN_CHAR); i++) {
			sz += cnt.get_char_cnt(i) * t.get_char_code(i).size();
		}

		CHECK(sz == 79991);
	}

	TEST_CASE("test rebuild 3") {
		HuffTree t;
		CharCounter cnt;
		std::mt19937 mtw(3);
		const size_t N = 10000;

		for (size_t i = 0; i < N; i++) {
			char c = mtw() % 2;
			cnt.add_char(c);
		}

		t.rebuild(cnt);

		size_t sz = 0;
		for (size_t i = 0; i < (1 << BITS_IN_CHAR); i++) {
			sz += cnt.get_char_cnt(i) * t.get_char_code(i).size();
		}

		CHECK(sz == 14968);
	}

	TEST_CASE("test rebuild 4") {
		HuffTree t;
		CharCounter cnt;
		std::mt19937 mtw(4);
		const size_t N = 10000;

		for (size_t i = 0; i < N; i++) {
			char c = mtw() % 5;
			cnt.add_char(c);
		}

		t.rebuild(cnt);

		size_t sz = 0;
		for (size_t i = 0; i < (1 << BITS_IN_CHAR); i++) {
			sz += cnt.get_char_cnt(i) * t.get_char_code(i).size();
		}

		CHECK(sz == 25952);
	}

	TEST_CASE("test rebuild 5") {
		HuffTree t;
		CharCounter cnt;
		std::mt19937 mtw(5);
		const size_t N = 10000;

		for (size_t i = 0; i < N; i++) {
			char c = mtw() % 1;
			cnt.add_char(c);
		}

		t.rebuild(cnt);

		size_t sz = 0;
		for (size_t i = 0; i < (1 << BITS_IN_CHAR); i++) {
			sz += cnt.get_char_cnt(i) * t.get_char_code(i).size();
		}

		CHECK(sz == 10000);
	}	
}