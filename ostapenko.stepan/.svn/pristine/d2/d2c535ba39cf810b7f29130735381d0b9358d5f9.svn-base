#include "huffman_dearchiver.h"
#include <fstream>
#include <cassert>

namespace huffman {

HuffFileData HuffmanDearchiver::dearchive(std::ifstream &in, std::ofstream &out) {
	std::vector <unsigned char> ch_perm = get_char_permutation(in);
	BitInputStream bi(in);
	std::vector <bool> tree = get_tree_tour(bi);
	htree.rebuild(ch_perm, tree);

	size_t additional_sz = ch_perm.size() + (tree.size() + 7) / 8 + sizeof(size_t);
	size_t input_sz_bits = read_file_size(bi);
	size_t input_sz = (input_sz_bits + 7) / 8;
	size_t output_sz = decompress_file(bi, input_sz_bits, out);

	return HuffFileData(input_sz, output_sz, additional_sz);
}

std::vector <unsigned char> HuffmanDearchiver::get_char_permutation(std::ifstream &in) const {
	char buf;
	std::vector <unsigned char> result;
	for (size_t i = 0; i < (1 << BITS_IN_CHAR); i++) {
		if (!in.read(&buf, 1)) {
			assert(0); // ex
		}
		result.push_back((unsigned char)buf);
	}
	return result;
}

std::vector <bool> HuffmanDearchiver::get_tree_tour(BitInputStream &bi) const {
	std::vector <bool> tree;
	const size_t tree_sz = (1 << BITS_IN_CHAR) * 2 - 1;
	for (size_t i = 0; i < (tree_sz - 1) * 2; i++) {
		tree.push_back(bi.read_bit());
	}
	return tree;
}

size_t HuffmanDearchiver::read_file_size(BitInputStream &bi) const {
	size_t result = 0;
	for (size_t i = 0, mask = 1; i < sizeof(size_t) * 8; i++, mask <<= 1) {
		if (bi.read_bit()) {
			result |= mask;
		}
	}
	return result;
}

size_t HuffmanDearchiver::decompress_file(BitInputStream &bi, size_t input_sz, std::ofstream &out) const {
	size_t output_sz = 0;
	HuffTree::Node const *cur = htree.get_root();

	for (size_t i = 0; i < input_sz; i++) {
		if (!bi.read_bit()) {
			cur = cur->l;
		} else {
			cur = cur->r;
		}

		if (cur->term()) {
			char to_write = (char)cur->ch;
			out.write(&to_write, 1);
			output_sz++;
			cur = htree.get_root();
		}
	}

	assert(cur == htree.get_root());

	return output_sz;
}

}