#ifndef _BMP_H_
#define _BMP_H_

#include <stdint.h>

typedef struct file_header_s {
	uint16_t type;
	uint32_t size;
	uint16_t res1;
	uint16_t res2;
	uint32_t offset;
} file_header;

typedef struct info_header_s {
	uint32_t info_size;
	int32_t width;
	int32_t height;
	uint16_t planes;
	uint16_t bit_count;
	uint32_t compression;
	uint32_t picture_size;
	int32_t x_pels;
	int32_t y_pels;
	uint32_t clr_used;
	uint32_t clr_important;
} info_header;

typedef struct pixel_s {
	uint8_t r, g, b;
} pixel;

typedef struct bmp_s {
	file_header header;
	info_header info;
	pixel **picture;
} bmp;

pixel **alloc_picture(int32_t width, int32_t height);

void load_bmp(FILE *file, bmp *p);

// Crop $b$ and write result into $a$.
void crop(bmp *a, bmp *b, int32_t x, int32_t y, int32_t width, int32_t height);

// Rotate $b$ and write result into $a$.
void rotate(bmp *a, bmp *b);

void save_bmp(FILE *file, bmp *p);

void free_bmp(bmp *p);

#endif