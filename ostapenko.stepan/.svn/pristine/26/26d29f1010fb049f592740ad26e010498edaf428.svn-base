#include "huffman.h"
#include <algorithm>
#include <fstream>
#include <cassert>

static std::vector <std::string> convert_args(int argc, char **argv) {
	std::vector <std::string> result;
	for (int i = 1; i < argc; i++) {
		result.push_back(std::string(argv[i]));
	}
	return result;
}

static void validate_args(const std::vector <std::string> &args) {
	assert(args.size() == 5);

	assert(std::count(args.begin(), args.end(), "-c") + std::count(args.begin(), args.end(), "-u") == 1);
	assert(std::count(args.begin(), args.end(), "-f") + std::count(args.begin(), args.end(), "--file") == 1);
	assert(std::count(args.begin(), args.end(), "-o") + std::count(args.begin(), args.end(), "--output") == 1);
}

static bool get_mode(const std::vector <std::string> &args) {
	for (size_t i = 0; i < args.size(); i++) {
		if (args[i] == "-c") {
			return false;
		}
		if (args[i] == "-u") {
			return true;
		}
	}
	assert(0);
}

static std::string get_input_file(const std::vector <std::string> &args) {
	for (size_t i = 0; i + 1 < args.size(); i++) {
		if (args[i] == "-f" || args[i] == "--file") {
			return args[i + 1];
		}
	}
	assert(0);
}

static std::string get_output_file(const std::vector <std::string> &args) {
	for (size_t i = 0; i + 1 < args.size(); i++) {
		if (args[i] == "-o" || args[i] == "--output") {
			return args[i + 1];
		}
	}
	assert(0);
}

static void archive(const std::string &input, const std::string &output) {
	std::ifstream in(input);
	std::ofstream out(output);
	huffman::HuffmanArchiver a;
	
	a.archive(in, out);
}

static void dearchive(const std::string &input, const std::string &output) {
	std::ifstream in(input);
	std::ofstream out(output);
	huffman::HuffmanDearchiver d;
	
	d.dearchive(in, out);
}

int main(int argc, char **argv) {
	std::vector <std::string> args = convert_args(argc, argv);
	validate_args(args);
	bool mode = get_mode(args);
	std::string input = get_input_file(args);
	std::string output = get_output_file(args);

	if (!mode) {
		archive(input, output);
	} else {
		dearchive(input, output);
	}

	return 0;
}